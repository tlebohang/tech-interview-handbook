
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.4.0
 * Query Engine version: f352a33b70356f46311da8b00d83386dd9f145d6
 */
Prisma.prismaVersion = {
  client: "4.4.0",
  engine: "f352a33b70356f46311da8b00d83386dd9f145d6"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.AccountScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
});

exports.Prisma.CityScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  stateId: 'stateId',
  ranking: 'ranking'
});

exports.Prisma.CompanyScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  logoUrl: 'logoUrl',
  website: 'website',
  ranking: 'ranking',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.CountryScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  code: 'code',
  ranking: 'ranking'
});

exports.Prisma.OffersAdminScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId'
});

exports.Prisma.OffersAnalysisScalarFieldEnum = makeEnum({
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  profileId: 'profileId',
  offerId: 'offerId',
  overallAnalysisUnitId: 'overallAnalysisUnitId'
});

exports.Prisma.OffersAnalysisUnitScalarFieldEnum = makeEnum({
  id: 'id',
  analysedOfferId: 'analysedOfferId',
  percentile: 'percentile',
  noOfSimilarOffers: 'noOfSimilarOffers'
});

exports.Prisma.OffersBackgroundScalarFieldEnum = makeEnum({
  id: 'id',
  totalYoe: 'totalYoe',
  offersProfileId: 'offersProfileId'
});

exports.Prisma.OffersCurrencyScalarFieldEnum = makeEnum({
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  value: 'value',
  currency: 'currency',
  baseValue: 'baseValue',
  baseCurrency: 'baseCurrency'
});

exports.Prisma.OffersEducationScalarFieldEnum = makeEnum({
  id: 'id',
  type: 'type',
  field: 'field',
  school: 'school',
  startDate: 'startDate',
  endDate: 'endDate',
  backgroundId: 'backgroundId'
});

exports.Prisma.OffersExperienceScalarFieldEnum = makeEnum({
  id: 'id',
  companyId: 'companyId',
  jobType: 'jobType',
  title: 'title',
  durationInMonths: 'durationInMonths',
  cityId: 'cityId',
  level: 'level',
  totalCompensationId: 'totalCompensationId',
  monthlySalaryId: 'monthlySalaryId',
  backgroundId: 'backgroundId'
});

exports.Prisma.OffersFullTimeScalarFieldEnum = makeEnum({
  id: 'id',
  title: 'title',
  level: 'level',
  totalCompensationId: 'totalCompensationId',
  baseSalaryId: 'baseSalaryId',
  bonusId: 'bonusId',
  stocksId: 'stocksId'
});

exports.Prisma.OffersInternScalarFieldEnum = makeEnum({
  id: 'id',
  title: 'title',
  internshipCycle: 'internshipCycle',
  startYear: 'startYear',
  monthlySalaryId: 'monthlySalaryId'
});

exports.Prisma.OffersOfferScalarFieldEnum = makeEnum({
  id: 'id',
  profileId: 'profileId',
  companyId: 'companyId',
  cityId: 'cityId',
  monthYearReceived: 'monthYearReceived',
  negotiationStrategy: 'negotiationStrategy',
  comments: 'comments',
  jobType: 'jobType',
  offersInternId: 'offersInternId',
  offersFullTimeId: 'offersFullTimeId'
});

exports.Prisma.OffersProfileScalarFieldEnum = makeEnum({
  id: 'id',
  profileName: 'profileName',
  createdAt: 'createdAt',
  editToken: 'editToken'
});

exports.Prisma.OffersReplyScalarFieldEnum = makeEnum({
  id: 'id',
  createdAt: 'createdAt',
  message: 'message',
  replyingToId: 'replyingToId',
  profileId: 'profileId',
  userId: 'userId'
});

exports.Prisma.OffersSpecificYoeScalarFieldEnum = makeEnum({
  id: 'id',
  yoe: 'yoe',
  domain: 'domain',
  backgroundId: 'backgroundId'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});

exports.Prisma.QuestionsAnswerCommentScalarFieldEnum = makeEnum({
  id: 'id',
  answerId: 'answerId',
  userId: 'userId',
  content: 'content',
  upvotes: 'upvotes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.QuestionsAnswerCommentVoteScalarFieldEnum = makeEnum({
  id: 'id',
  answerCommentId: 'answerCommentId',
  userId: 'userId',
  vote: 'vote',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.QuestionsAnswerScalarFieldEnum = makeEnum({
  id: 'id',
  questionId: 'questionId',
  userId: 'userId',
  content: 'content',
  upvotes: 'upvotes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.QuestionsAnswerVoteScalarFieldEnum = makeEnum({
  id: 'id',
  answerId: 'answerId',
  userId: 'userId',
  vote: 'vote',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.QuestionsListQuestionEntryScalarFieldEnum = makeEnum({
  id: 'id',
  listId: 'listId',
  questionId: 'questionId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.QuestionsListScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.QuestionsQuestionCommentScalarFieldEnum = makeEnum({
  id: 'id',
  questionId: 'questionId',
  userId: 'userId',
  upvotes: 'upvotes',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.QuestionsQuestionCommentVoteScalarFieldEnum = makeEnum({
  id: 'id',
  questionCommentId: 'questionCommentId',
  userId: 'userId',
  vote: 'vote',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.QuestionsQuestionEncounterScalarFieldEnum = makeEnum({
  id: 'id',
  questionId: 'questionId',
  userId: 'userId',
  companyId: 'companyId',
  countryId: 'countryId',
  stateId: 'stateId',
  cityId: 'cityId',
  role: 'role',
  seenAt: 'seenAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.QuestionsQuestionScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  content: 'content',
  questionType: 'questionType',
  lastSeenAt: 'lastSeenAt',
  upvotes: 'upvotes',
  numEncounters: 'numEncounters',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.QuestionsQuestionVoteScalarFieldEnum = makeEnum({
  id: 'id',
  questionId: 'questionId',
  userId: 'userId',
  vote: 'vote',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.ResumesCommentScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  resumeId: 'resumeId',
  parentId: 'parentId',
  description: 'description',
  section: 'section',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.ResumesCommentVoteScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  commentId: 'commentId',
  value: 'value',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.ResumesResumeScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  title: 'title',
  role: 'role',
  experience: 'experience',
  locationId: 'locationId',
  url: 'url',
  additionalInfo: 'additionalInfo',
  isResolved: 'isResolved',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.ResumesStarScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  resumeId: 'resumeId',
  createdAt: 'createdAt'
});

exports.Prisma.SessionScalarFieldEnum = makeEnum({
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.StateScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  countryId: 'countryId'
});

exports.Prisma.TodoScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  text: 'text',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image'
});

exports.Prisma.VerificationTokenScalarFieldEnum = makeEnum({
  identifier: 'identifier',
  token: 'token',
  expires: 'expires'
});
exports.JobType = makeEnum({
  INTERN: 'INTERN',
  FULLTIME: 'FULLTIME'
});

exports.QuestionsQuestionType = makeEnum({
  CODING: 'CODING',
  SYSTEM_DESIGN: 'SYSTEM_DESIGN',
  BEHAVIORAL: 'BEHAVIORAL',
  THEORY: 'THEORY'
});

exports.ResumesSection = makeEnum({
  GENERAL: 'GENERAL',
  EDUCATION: 'EDUCATION',
  EXPERIENCE: 'EXPERIENCE',
  PROJECTS: 'PROJECTS',
  SKILLS: 'SKILLS'
});

exports.TodoStatus = makeEnum({
  INCOMPLETE: 'INCOMPLETE',
  COMPLETE: 'COMPLETE'
});

exports.Vote = makeEnum({
  UPVOTE: 'UPVOTE',
  DOWNVOTE: 'DOWNVOTE'
});

exports.Prisma.ModelName = makeEnum({
  Account: 'Account',
  Session: 'Session',
  User: 'User',
  VerificationToken: 'VerificationToken',
  Todo: 'Todo',
  Company: 'Company',
  Country: 'Country',
  State: 'State',
  City: 'City',
  ResumesResume: 'ResumesResume',
  ResumesStar: 'ResumesStar',
  ResumesComment: 'ResumesComment',
  ResumesCommentVote: 'ResumesCommentVote',
  OffersProfile: 'OffersProfile',
  OffersAdmin: 'OffersAdmin',
  OffersBackground: 'OffersBackground',
  OffersSpecificYoe: 'OffersSpecificYoe',
  OffersExperience: 'OffersExperience',
  OffersCurrency: 'OffersCurrency',
  OffersEducation: 'OffersEducation',
  OffersReply: 'OffersReply',
  OffersOffer: 'OffersOffer',
  OffersIntern: 'OffersIntern',
  OffersFullTime: 'OffersFullTime',
  OffersAnalysis: 'OffersAnalysis',
  OffersAnalysisUnit: 'OffersAnalysisUnit',
  QuestionsQuestion: 'QuestionsQuestion',
  QuestionsQuestionEncounter: 'QuestionsQuestionEncounter',
  QuestionsQuestionVote: 'QuestionsQuestionVote',
  QuestionsQuestionComment: 'QuestionsQuestionComment',
  QuestionsQuestionCommentVote: 'QuestionsQuestionCommentVote',
  QuestionsAnswer: 'QuestionsAnswer',
  QuestionsAnswerVote: 'QuestionsAnswerVote',
  QuestionsAnswerComment: 'QuestionsAnswerComment',
  QuestionsAnswerCommentVote: 'QuestionsAnswerCommentVote',
  QuestionsList: 'QuestionsList',
  QuestionsListQuestionEntry: 'QuestionsListQuestionEntry'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
